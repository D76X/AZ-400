// https://dataexplorer.azure.com/clusters/help/databases/Samples
// Dataset: Samples > Tables > Storm_Events
// --------------------------------------------------------------

//https://learn.microsoft.com/en-gb/training/modules/gain-insights-data-kusto-query-language/4-exercise-count-events-count-function
// ----------------------------------------------------------
// Gain insights from your data by using Kusto Query Language
// https://learn.microsoft.com/en-gb/training/modules/gain-insights-data-kusto-query-language/
// ----------------------------------------------------------
// -1 GROUP & AGGREGATE
// Group data using aggregation functions.

// -2 COUNT EVENTS: count(), dcount(), countif()
// Count events using the count(), dcount(), countif() functions.

// -3 SUMMARIZE: sum(), avg(), min(), max(), percentiles()
// Summarize data using sum(), avg(), min(), max(), and percentiles() functions.

// -4 VISUALIZE: render
// Visualize data using the render operator.

// -5 USE VARIABLES: let
// Introduce variables using the let statement.
// StormEvents
// | summarize count()

// --------------------------------------------------------------------------------------
// COUNT, GROUP & VISUALIZE

//How many storm events happened in each state?
StormEvents
| summarize EventCount = count() by State
| sort by EventCount

// count distinct types of events by using dcount() 
// count only certain types of events with countif()
//How many events in each state caused damage?
//How many different type of events happened in each state?
StormEvents
| summarize count(),
    EventsWithDamageToCrops = countif(DamageCrops > 0),
    Count = dcount(EventType) by State
| sort by Count

// the distinct() operator lists the distinct values of a particular column
StormEvents
| where State == "TEXAS"
| distinct EventType
| sort by EventType asc


// https://learn.microsoft.com/en-gb/azure/data-explorer/kusto/query/renderoperator?pivots=azuredataexplorer
// To visualize results, you'll use the render operator. 
// This operator comes at the end of a query.
// Within the render operator, you'll specify which type of visualization to use
// such as: columnchart, barchart, piechart, scatterchart, pivotchart, and others.
// You can also optionally define different properties of the visualization, such as the x-axis or y-axis.

StormEvents
| summarize count(),
    EventsWithDamageToCrops = countif(DamageCrops > 0),
    dcount(EventType) by State
| sort by count_
| render barchart

// https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/binfunction
// How many storms happened each week during the year 2007?
// look at the distribution of storms throughout the year, by grouping data by time.
//The time values we have in every record are the start time and end time. 
//Let's group the event start times by week, so we can see how many storms happened
// each week during the year 2007.
// bin(value,roundTo)
// The bin value can be a number, date, or timespan. 
StormEvents
| summarize count() by bin(StartTime, 7d)
| render columnchart

// Find the total amount of damage caused in each time interval.
// The dataset you're working with has two columns related to damage:
// DamageProperty 
// DamageCrops
// create a calculated column that adds these two damage sources together
// create an aggregation of total damage binned by week
StormEvents
| extend damage = DamageProperty + DamageCrops
| summarize sum(damage) by bin(StartTime, 7d)
| render columnchart

// The previous query shows you damage as a function of time. 
// Another way to compare the damage is by event type.
StormEvents
| extend damage = DamageProperty + DamageCrops
| summarize sum(damage) by EventType
| render piechart

// -------------------------------------------------------------
// https://learn.microsoft.com/en-gb/training/modules/gain-insights-data-kusto-query-language/6-exercise-summarize-data-aggregate-functions
// SUMMARIZE
// Summarize data using aggregate functions
// so far the sum() aggregate function has been employed
// there are other aggregate functions
// sum(), avg(), min(), max(), and percentiles(), etc.

// use avg() function to calculate the average damage caused by storms in US dollars.
StormEvents
| extend damage = DamageProperty + DamageCrops
| where damage > 0
| summarize avg(damage) by EventType
| sort by avg_damage

// avgif() only averages results for which the predicate is true. 
// While we're at it, let's clean up the results by using the round() function. 
// This function rounds the results to the specified number of digits after the decimal point.
// In this example, you'll use the default rounding value of 0.
StormEvents
| extend damage = DamageProperty + DamageCrops
| summarize round(avgif(damage, damage > 0)) by EventType
| sort by avgif_damage

// Find extremes using min() and max()
// you may also use: minif(predicate), maxif(predicate), sumif(predicate)
StormEvents
| extend damage = DamageProperty + DamageCrops
| where damage > 0
| summarize MaxDamage=max(damage), MinDamage=min(damage), AverageDamage=round(avg(damage)) by EventType
| sort by MaxDamage

// Use the percentiles() function